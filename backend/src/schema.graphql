type Query {
  users(UID: String, group: GroupType): [User]
  comments(group: GroupType, type: QueryType, data: String): [Comment!]!
  replies(cmtID: ID!): [Reply!]!
}

type Mutation {
  createUser(UID: String!, GPA: Float!, group: GroupType!): User!
  updateUser(UID: String!, data: UpdateUserInput!): User!
  
  createComment(UID: String!, content: String!, group: GroupType): Comment
  deleteComment(CID: String!): String
  updateComment(CID: String!, data: UpdateCommentInput!): Comment!
  
  createReply(UID: String!, CID: String!, content: String!): Reply!
  deleteReply(RID: String!): Reply!
  updateReply(RID: String!, data: UpdateReplyInput!): Reply!
}

type Subscription {
  comment: CommentSubscriptionPayload!
}

input UpdateUserInput {
  password: String!
  GPA: Float
  college: String
  school: String
  isRegistered: Boolean 
  duration: String
  languageExam: String 
  apply_list: [String]
}

input UpdateCommentInput {
  author: ID!
  content: String!
  followers: [ID!]
  replies: [ID!]
}

input UpdateReplyInput {
  author: String!
  comment: ID!
  content: String!
}

type User {
  id: ID!
  user_id: String!
  group: GroupType!
  GPA: Float!
  password: String
  college: CollegeType
  school: String
  isRegistered: Boolean 
  duration: String
  languageExam: String 
  apply_list: [String]
}

type Comment {
  id: ID!
  author: User!
  group: GroupType
  content: String!
  followers: [User!]
  replies: [Reply!]
}

type Reply {
  id: ID!
  author: User!
  comment: Comment!
  content: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

enum QueryType {
  SEARCH
  SELF
  FOLLOW
}

enum GroupType {
  GENERAL
  FRENCH
  JAPANESE
  SPANISH
  KOREAN
  GERMAN
  CHINESE
}

enum CollegeType {
  C1
  C2
  C3
  C4
  C5
  C6
  C7
  C8
  C9
  CA
  CB
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}
